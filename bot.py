import logging
import sqlite3

from aiogram import Bot, Dispatcher, executor, types
from buttons import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from sqlalchemy import create_engine
from aiogram.types import Message, CallbackQuery

API_TOKEN = '6811011387:AAES6B9op43Vm-Z6MIrV32JuAYUcXjDTdUk'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


db_engine = create_engine('sqlite:///transfers.db')

class Student(StatesGroup):
    fullname = State()
    password = State()
    phone = State()
    end = State()
    check_saver = State()


class Otziv(StatesGroup):
    # fullname = State()
    WAITING_FOR_REVIEW = State('waiting_for_review')

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç InTuition",reply_markup=boss_menu)

conn = sqlite3.connect('transfers.db')
cursor = conn.cursor()

# Create transfers table if not exists
cursor.execute('''CREATE TABLE IF NOT EXISTS transfers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    amount REAL
                )''')
conn.commit()



# States
class TransferState(StatesGroup):
    waiting_for_transfer = State()
    waiting_for_image = State()



# class ImageState(StatesGroup):
#     waiting_for_image = State()

fake_data = {
    "user_id": ['ism','password','phone']
}
@dp.message_handler(text="üî†–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüî†")  
async def send_welcome(message: types.Message):
    await message.answer(f"–í–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è :")
    connection = sqlite3.connect("students.db")
    db = connection.cursor()
    db.execute("""CREATE TABLE IF NOT EXISTS users(
               fullname TEXT,
               password TEXT,
               phone TEXT

)""")
    
    db.execute(f"""
INSERT INTO users
VALUES (?,?,?)""",(f'{message.from_user.full_name}','password','phone'))
    connection.commit()
    await Student.fullname.set()
    

@dp.message_handler(state=Student.fullname)
async def echo(message: types.Message,state: FSMContext):
    fullname = message.text
    fake_data[message.from_user.id] = [fullname]
    # await message.answer(message.text)

    # await Student.fullname.set()

    await message.answer(f" –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")

    await Student.next()


@dp.message_handler(state=Student.password)
async def echo(message: types.Message,state: FSMContext):
    # await message.answer(message.text)
    pss = fake_data[message.from_user.id]
    pss.append(message.text)
    fake_data[message.from_user.id] = pss
    contact = message.contact
    # await bot.send_contact(message.chat.id, contact.phone_number)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:",reply_markup=number)


    await Student.phone.set()
    # await state.finish()


# @dp.message_handler(state=Student.password)

    


@dp.message_handler(state=Student.phone,content_types=types.ContentType.CONTACT)
async def echo(message: types.Message,state: FSMContext):
    # await message.answer(message.contact)
    phone = message.contact['phone_number']
    pss = fake_data[message.from_user.id]
    pss.append(phone)

    connection = sqlite3.connect("students.db")
    db = connection.cursor()
    db.execute("""CREATE TABLE IF NOT EXISTS users(
                   fullname TEXT,
                   password TEXT,
                   phone TEXT
             

    )""")
        
    db.execute(f"""
    INSERT INTO users
    VALUES (?,?,?)""",(fake_data[message.from_user.id][0],fake_data[message.from_user.id][1],fake_data[message.from_user.id][2])) #  ,chatid
    connection.commit()

    await message.answer (f"–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—åüéâ",reply_markup=boss_menu)

    await state.finish()


# @dp.message_handler(state=Student.money)
# async def echo(message: types.Message,state: FSMContext):
#     chatid = message.from_user.id
#     pss = fake_data[message.from_user.id]
#     pss.append(message.text)
#     fake_data[message.from_user.id] = pss
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å—É–º–º—É:")

#     connection = sqlite3.connect("students.db")
#     db = connection.cursor()
#     db.execute("""CREATE TABLE IF NOT EXISTS users(
#                    fullname TEXT,
#                    password TEXT,
#                    phone TEXT
             

#     )""")
        
#     db.execute(f"""
#     INSERT INTO users
#     VALUES (?,?,?,?)""",(fake_data[message.from_user.id][0],fake_data[message.from_user.id][1],fake_data[message.from_user.id][2],fake_data[message.from_user.id][3])) #  ,chatid
#     connection.commit()

#     await message.answer (f"–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—åüéâ",reply_markup=boss_menu)

#     await state.finish()

   #    chatid INT

@dp.message_handler(text="üìû–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—èüìû")
async def echo(message: types.Message):
    await message.answer("+998 97 403 30 41")

@dp.message_handler(text="üí∞–æ–ø–ª–∞—Ç–∞üí∞")
async def echo(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton(text="üí≥–°–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—Éüí≥", callback_data='send_link')
    keyboard.add(button)
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ-–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'send_link')
async def send_link(callback_query: CallbackQuery):
    link = "https://my.click.uz/clickp2p/8228B4446313A9AA243C56E027E21BE37BF2B00EC639B74966FC8F37B5A64A60"  # Change this to your actual transfer link
    await callback_query.message.answer(f"""–ù–∞–∂–º–∏—Ç–µ [—Å—é–¥–∞]({link}) —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥
    –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –æ—Ç–ø—Ä–∞–≤—Ç–µ —á–µ–∫ –Ω–∞–º,""", parse_mode=types.ParseMode.MARKDOWN)
    await Student.check_saver.set()


import sqlite3
from aiogram import types  # Assuming you are using aiogram library

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Student.check_saver)
async def saver(message: types.Message, state: FSMContext):
    # Get the photo file ID
    photo_file_id = message.photo[-1].file_id
    
    # Download the photo file
    photo_file = await bot.download_file_by_id(file_id=photo_file_id)
    
    # Read the content of the BytesIO object (Note: no 'await' is needed for the read method)
    photo_content = photo_file.read()

    # Save the photo content to a local file
    file_path = f'uploads/{photo_file_id}.jpg'  # You can customize the file name and extension
    with open(file_path, 'wb') as local_file:
        local_file.write(photo_content)

    # Optionally, you can save additional information or perform further actions with the photo

    await message.answer("üéâ–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüéâ")

#@dp.message_handler(text="üë®‚Äçüéì–ü—Ä–æ—Ñ–∏–ª—åüë®‚Äçüéì",state = '*')
#async def echo(message: types.Message):
#    print(True)
 #   connection = sqlite3.connect("students.db")
 #   cursor = connection.cursor()
 #   users_list = cursor.execute("SELECT fullname,password,phone FROM users").fetchall()
 #   for i in users_list:
 #       print(i)
 #       if i[0] == message.from_user.username:
 #           # cursor.execute("SELECT * FROM students.db").fetchall()
  #          await message.answer(f"–£–≤–∞–∂–∞–µ–º—ã–π —É—á–µ–Ω–∏–∫\n–ò–º—è - {i[0]}\n–ü–∞—Ä–æ–ª—å - {i[1]}\n–ù–æ–º–µ—Ä - {i[2]}")
        # else:
  #      #     await message.answer("–¢–∞–∫–æ–µ –∞–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—à–µ—Å—Ç–≤—É–µ—Ç")
 #           await message.answer("–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–π")
    

@dp.message_handler(text="üë®‚Äçüéì–ü—Ä–æ—Ñ–∏–ª—åüë®‚Äçüéì", state='*')
async def echo(message: types.Message):
    print(True)
    connection = sqlite3.connect("students.db")
    cursor = connection.cursor()
    users_list = cursor.execute("SELECT fullname, password, phone FROM users").fetchall()

    for i in users_list:
        print(i)
        if i[2] == message.from_user.username:
            await message.answer(f"–£–≤–∞–∂–∞–µ–º—ã–π —É—á–µ–Ω–∏–∫\n–ò–º—è - {i[0]}\n–ü–∞—Ä–æ–ª—å - {i[1]}\n–ù–æ–º–µ—Ä - {i[2]}")
            user_found = True

    if not user_found:
        await message.answer("–¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        await message.answer("–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")



@dp.message_handler(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def cmd_leave_review(message: types.Message):
    # –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    await Otziv.WAITING_FOR_REVIEW.set()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∑—ã–≤
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",reply_markup=boss_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ WAITING_FOR_REVIEW
@dp.message_handler(state=Otziv.WAITING_FOR_REVIEW)
async def process_review(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    review_text = message.text

    await state.finish()

    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
